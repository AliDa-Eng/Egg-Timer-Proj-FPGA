`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/09/2024 07:39:45 PM
// Design Name: 
// Module Name: master_control
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module master_control(
    input clk, //100 MHz board clock =====
    input min, // BTNU minutes input =====
    input sec, // BTND seconds input =====
    input start, // BTNR start input =====
    input rst, // SW15 reset input =====
    input set_time, // BTNL since we can't hold down button =====
    input count_enable,//SW0 enable counter =====
    input up_down,// innovation #1 SW2 Up-down set time function =====
    input SW12,
    input SW11,
    input SW10,
    output enabled,// Lights up when SW0 on =====
    //output [15:0] t_on,// Lights up when counter is counting and active, turns off when done =====
    output reg [6:0] seg,// 7 segment output =====
    output reg [7:0] an,// anode for 7 segment displays =====
    output led0,led1
    );
//wires to carry intermediary signals
    
    wire [3:0] int_min1;
    wire [3:0] int_min2;
    wire [3:0] int_sec1;
    wire [3:0] int_sec2;
    
    wire [3:0] cnt_min1;
    wire [3:0] cnt_min2;
    wire [3:0] cnt_sec1;
    wire [3:0] cnt_sec2;
    
    wire [3:0] m1,m2,s1,s2;
    
    wire [6:0] seg_out1,seg_out2,seg_out3,seg_out4;
    
    wire count_done;
    //Signify if counter is at 00:00
    reg stop;
    //Signify wether to display counter time or cook time
    reg count_or_cook;
    
    wire db_min;
    wire db_sec;
    
    
    wire clk_5mhz, clk_1hz, clk_500hz, clk_100hz;
    //IP generated clock wizard, 10 MHz clock down to 5 MHz
    clk_wiz_0 clk1(.clk_out1(clk_5mhz), .reset(rst), .clk_in1(clk));
    
    //clock divider modules, 5 MHz -> 1 Hz (counter) and 500 Hz (display refresh)
    clock_divider_5MHzto1Hz clk_div1(.clk_in(clk_5mhz),.rst(rst),.en(1),.clk_out(clk_1hz));
    clock_divider_5MHzto500Hz clk_div2(.clk_in(clk_5mhz),.rst(rst),.en(1),.clk_out(clk_500hz));
    clock_divider_5MHzto100Hz clk_div3(.clk_in(clk_5mhz),.rst(rst),.en(1),.clk_out(clk_100hz));
    
    //Button pulse generator, so numbers don't go crazy
    db_pulse deb_sec(.clk(clk_5mhz),.rst(rst),.press(sec),.press_db(db_sec));
    db_pulse deb_min(.clk(clk_5mhz),.rst(rst),.press(min),.press_db(db_min));
    db_pulse deb_start(.clk(clk_5mhz),.rst(rst),.press(start),.press_db(p_start));
    
    assign led0 = db_sec;
    assign led1 = db_min;
    
    //cook time module
    cook_time U8(.clk(clk_100hz),.enable(set_time),.rst(rst),
                  .inc_sec(db_sec),.inc_min(db_min),.up_down(up_down), .pre_set1(SW12), 
                  .pre_set2(SW11), .pre_set3(SW10), .sec_out1(int_sec1),.min_out1(int_min1),
                  .sec_out2(int_sec2),.min_out2(int_min2));
    
    //count time module              
    count_time U9(.sec_in1(int_sec1),.min_in1(int_min1),.sec_in2(int_sec2),.min_in2(int_min2),
                      .clk_1hz(clk_1hz),.enable(count_enable),
                      .start_pulse(start_pulse),.set_time(set_time),.rst(rst),
                      .sec_out1(cnt_sec1),.min_out1(cnt_min1),.sec_out2(cnt_sec2),.min_out2(cnt_min2),
                      .count_done(count_done));
    
    //converts start button into a flopped signal, ie stays high until button pressed again
    start_FF U10(.start(start),.clk(clk_5mhz),.set_time(set_time),.rst(rst),.pulse(start_pulse));
    
    //timer on module for blinking light
   /*  timer_on U11(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[0]),.stop(count_done));
    timer_on U12(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[1]),.stop(count_done));
    timer_on U13(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[2]),.stop(count_done));
    timer_on U14(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[3]),.stop(count_done));
    timer_on U15(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[4]),.stop(count_done));
    timer_on U16(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[5]),.stop(count_done));
    timer_on U17(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[6]),.stop(count_done));
    timer_on U18(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[7]),.stop(count_done));
    timer_on U19(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[8]),.stop(count_done));
    timer_on U20(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[9]),.stop(count_done));
    timer_on U21(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[10]),.stop(count_done));
    timer_on U22(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[11]),.stop(count_done));
    timer_on U23(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[12]),.stop(count_done));
    timer_on U24(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[13]),.stop(count_done));
    timer_on U25(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[14]),.stop(count_done));
    timer_on U26(.clk(clk_1hz),.enable(start_pulse),.timer_on(t_on[15]),.stop(count_done));
   */ 
    //enabled LED on when count is enabled
    assign enabled = count_enable;
    
    //logic to decide what numbers to output from MUX
    always @ (posedge clk_5mhz) begin
        if ( set_time | ~count_enable) begin
            count_or_cook <= 1;
        end else if ( ~set_time | count_enable) begin
            count_or_cook <= 0;
        end else begin
            count_or_cook <= count_or_cook;
        end   
    end
    
    mux_display U27(.select(count_or_cook),
                .min1_count(cnt_min1),.min2_count(cnt_min2),.sec1_count(cnt_sec1),.sec2_count(cnt_sec2),
                .min1_set(int_min1),.min2_set(int_min2),.sec1_set(int_sec1),.sec2_set(int_sec2),
                .min1(m1),.min2(m2),.sec1(s1),.sec2(s2));
    
    //display logic 
    reg [3:0] count;          
    always @(posedge clk_500hz or posedge rst) begin
       if (rst) begin
           count <= 3'b000;
           seg <= 0;
           an <= 8'b11111111;
       end else begin
           case(count)
               3'b000:begin
                   seg <= seg_out1;
                   an <= 8'b11111110;
                   count <= count + 1;
               end
               3'b001:begin
                   seg <= seg_out2;
                   an <= 8'b11111101;
                   count <= count + 1;
               end
               3'b010:begin
                   seg <= seg_out3;
                   an <= 8'b11111011;
                   count <= count + 1;
               end
               3'b011:begin
                   seg <= seg_out4;
                   an <= 8'b11110111;
                   count <= count + 1;
               end
               3'b100:begin
                    an <= 8'b11111111;
                    count <= count + 1;
                end
                3'b101:begin
                    an <= 8'b11111111;
                    count <= count + 1;
                end
                3'b110:begin
                    an <= 8'b11111111;
                    count <= count + 1;
                end
                3'b111:begin
                    an <= 8'b11111111;
                    count <= 3'b000;
                end
                default:begin
                    count <= 3'b000;
                end
           endcase
       end
    end 
    
    //bcdto7seg modules
    bcdto7seg U28(.x(s1),.seg(seg_out1));
    bcdto7seg U29(.x(s2),.seg(seg_out2));
    bcdto7seg U30(.x(m1),.seg(seg_out3));
    bcdto7seg U31(.x(m2),.seg(seg_out4));
endmodule
