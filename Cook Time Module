`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/09/2024 07:34:56 PM
// Design Name: 
// Module Name: cook_time
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module cook_time(
    input clk,//5 MHz clk
    input enable,//enable
    input rst,//reset
    input inc_sec,//debounced button pulse
    input inc_min,//debounced button pulse
    input up_down,//Innovation #1, increment or decrement numbers
    input pre_set1,
    input pre_set2,
    input pre_set3,
    output reg [3:0] sec_out1,//Binary number outputs
    output reg [3:0] min_out1,
    output reg [3:0] sec_out2,
    output reg [3:0] min_out2
    );
    always @ (posedge clk)begin
            if (rst) begin//synchronous reset
                sec_out1 <= 0;
                sec_out2 <= 0;
                min_out1 <= 0;
                min_out2 <= 0;
           
            end else if (inc_sec && enable && up_down) begin //decrease seconds
               sec_out1 <= sec_out1 - 1;
               if (sec_out1 <= 0) begin
                   sec_out1 <= 9;
                   sec_out2 <= sec_out2 - 1;
                   if(sec_out2 <= 0) begin
                       sec_out2 <= 5;
                   end
               end 
                       
           end else if (inc_min && enable && up_down) begin //decrease minutes
               min_out1 <= min_out1 - 1;
               if (min_out1 <= 0) begin
                   min_out1 <= 9;
                   min_out2 <= min_out2 - 1;
                   if(min_out2 <= 0) begin
                       min_out2 <= 5;
                   end
               end            
            
            end else if (inc_sec && enable) begin //increase seconds
                sec_out1 <= sec_out1 + 1;
                if (sec_out1 >= 9) begin
                    sec_out1 <= 0;
                    sec_out2 <= sec_out2 + 1;
                    if(sec_out2 >= 5) begin
                        sec_out2 <= 0;
                    end
                end 
                
            end else if (inc_min && enable) begin //increase minutes
                min_out1 <= min_out1 + 1;
                if (min_out1 >= 9) begin
                    min_out1 <= 0;
                    min_out2 <= min_out2 + 1;
                    if(min_out2 >= 5) begin
                        min_out2 <= 0;
                    end
                end 
                
            end else if (pre_set1 && enable) begin
                min_out1 <= 1;
                sec_out2 <= 3;
                sec_out1 <= 0;
                
            end else if (pre_set2 && enable) begin
                min_out1 <= 2;
                sec_out2 <= 0;
                sec_out1 <= 0;
                
            end else if (pre_set3 && enable) begin
                min_out1 <= 2;
                sec_out2 <= 3;
                sec_out1 <= 0;
                
            end else begin
               sec_out1 <= sec_out1;
               sec_out2 <= sec_out2;
               min_out1 <= min_out1;
               min_out2 <= min_out2;
            end
        end
    
endmodule
